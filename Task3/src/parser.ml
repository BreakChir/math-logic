type token =
  | VAR of (string)
  | EXPR of (Grammar.expr)
  | IMPL
  | AND
  | OR
  | NOT
  | OPEN
  | CLOSE
  | EOF
  | DEQ
  | COMMA

open Parsing;;
let _ = parse_error;;
# 2 "src/parser.mly"
  open Grammar;;
# 19 "src/parser.ml"
let yytransl_const = [|
  259 (* IMPL *);
  260 (* AND *);
  261 (* OR *);
  262 (* NOT *);
  263 (* OPEN *);
  264 (* CLOSE *);
    0 (* EOF *);
  265 (* DEQ *);
  266 (* COMMA *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* EXPR *);
    0|]

let yylhs = "\255\255\
\003\000\001\000\001\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\005\000\005\000\002\000\000\000\000\000\000\000"

let yylen = "\002\000\
\002\000\003\000\004\000\001\000\001\000\003\000\002\000\003\000\
\003\000\003\000\001\000\003\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\004\000\005\000\000\000\000\000\
\000\000\014\000\000\000\000\000\015\000\000\000\016\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\001\000\006\000\002\000\000\000\009\000\000\000\000\000\
\000\000\003\000"

let yydgoto = "\004\000\
\010\000\013\000\015\000\011\000\012\000"

let yysindex = "\041\000\
\001\255\021\255\021\255\000\000\000\000\000\000\021\255\021\255\
\021\255\000\000\042\255\252\254\000\000\012\000\000\000\015\000\
\000\000\026\255\018\000\021\255\021\255\021\255\021\255\021\255\
\000\000\000\000\000\000\000\000\042\255\000\000\005\255\021\000\
\042\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\000\000\001\000\000\000\
\007\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\017\000\000\000"

let yytablesize = 282
let yytable = "\000\000\
\010\000\005\000\006\000\008\000\023\000\024\000\007\000\008\000\
\021\000\009\000\000\000\025\000\011\000\011\000\026\000\012\000\
\012\000\028\000\014\000\016\000\034\000\005\000\006\000\017\000\
\018\000\019\000\007\000\008\000\020\000\021\000\022\000\000\000\
\000\000\027\000\000\000\000\000\029\000\030\000\031\000\032\000\
\033\000\001\000\002\000\003\000\020\000\021\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\010\000\000\000\000\000\
\010\000\010\000\010\000\008\000\008\000\008\000\020\000\021\000\
\022\000\020\000\021\000\022\000\020\000\021\000\022\000\020\000\
\021\000\022\000"

let yycheck = "\255\255\
\000\000\001\001\002\001\000\000\009\001\010\001\006\001\007\001\
\004\001\009\001\255\255\000\000\009\001\010\001\000\000\009\001\
\010\001\000\000\002\000\003\000\000\000\001\001\002\001\007\000\
\008\000\009\000\006\001\007\001\003\001\004\001\005\001\255\255\
\255\255\008\001\255\255\255\255\020\000\021\000\022\000\023\000\
\024\000\001\000\002\000\003\000\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\005\001\255\255\255\255\
\008\001\009\001\010\001\008\001\009\001\010\001\003\001\004\001\
\005\001\003\001\004\001\005\001\003\001\004\001\005\001\003\001\
\004\001\005\001"

let yynames_const = "\
  IMPL\000\
  AND\000\
  OR\000\
  NOT\000\
  OPEN\000\
  CLOSE\000\
  EOF\000\
  DEQ\000\
  COMMA\000\
  "

let yynames_block = "\
  VAR\000\
  EXPR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 24 "src/parser.mly"
                         ( _1 )
# 173 "src/parser.ml"
               : Grammar.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 26 "src/parser.mly"
                      ( ([], _2) )
# 180 "src/parser.ml"
               : Grammar.expr list * Grammar.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ex) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 27 "src/parser.mly"
                          ( (_1, _3) )
# 188 "src/parser.ml"
               : Grammar.expr list * Grammar.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 29 "src/parser.mly"
                         ( Var (_1) )
# 195 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Grammar.expr) in
    Obj.repr(
# 30 "src/parser.mly"
                         ( _1 )
# 202 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 31 "src/parser.mly"
                         ( _2 )
# 209 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 32 "src/parser.mly"
                         ( Not (_2) )
# 216 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 33 "src/parser.mly"
                         ( Binary (Impl, _1, _3) )
# 224 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 34 "src/parser.mly"
                         ( Binary (Conj, _1, _3) )
# 232 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 35 "src/parser.mly"
                         ( Binary (Disj, _1, _3) )
# 240 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 37 "src/parser.mly"
                         ( [ _1 ] )
# 247 "src/parser.ml"
               : 'ex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ex) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 38 "src/parser.mly"
                         ( _3 :: _1 )
# 255 "src/parser.ml"
               : 'ex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 41 "src/parser.mly"
                         ( _1 )
# 262 "src/parser.ml"
               : Grammar.expr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry ax *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Grammar.expr list * Grammar.expr)
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Grammar.expr)
let ax (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Grammar.expr)
